/**
 * DynamiaTools API
 * DynamiaTools Metadata API
 *
 * The version of the OpenAPI document: 5.3.6
 * Contact: mario@dynamiasoluciones.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package tools.dynamia.clients;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import tools.dynamia.clients.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ActionExecutionRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ActionExecutionRequest>>(){}.getType();
    }
    
    if ("ActionExecutionResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ActionExecutionResponse>>(){}.getType();
    }
    
    if ("ActionMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<List<ActionMetadata>>(){}.getType();
    }
    
    if ("ActionRef".equalsIgnoreCase(className)) {
      return new TypeToken<List<ActionRef>>(){}.getType();
    }
    
    if ("ApplicationMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationMetadata>>(){}.getType();
    }
    
    if ("ApplicationMetadataActions".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationMetadataActions>>(){}.getType();
    }
    
    if ("ApplicationMetadataEntities".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApplicationMetadataEntities>>(){}.getType();
    }
    
    if ("BeanSorterObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeanSorterObject>>(){}.getType();
    }
    
    if ("DataPaginator".equalsIgnoreCase(className)) {
      return new TypeToken<List<DataPaginator>>(){}.getType();
    }
    
    if ("EntityMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<List<EntityMetadata>>(){}.getType();
    }
    
    if ("Field".equalsIgnoreCase(className)) {
      return new TypeToken<List<Field>>(){}.getType();
    }
    
    if ("FieldGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<FieldGroup>>(){}.getType();
    }
    
    if ("NavigationNode".equalsIgnoreCase(className)) {
      return new TypeToken<List<NavigationNode>>(){}.getType();
    }
    
    if ("NavigationTree".equalsIgnoreCase(className)) {
      return new TypeToken<List<NavigationTree>>(){}.getType();
    }
    
    if ("QueryParameters".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueryParameters>>(){}.getType();
    }
    
    if ("ViewDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<List<ViewDescriptor>>(){}.getType();
    }
    
    if ("ViewDescriptorMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<List<ViewDescriptorMetadata>>(){}.getType();
    }
    
    if ("ViewLayout".equalsIgnoreCase(className)) {
      return new TypeToken<List<ViewLayout>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ActionExecutionRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ActionExecutionRequest>(){}.getType();
    }
    
    if ("ActionExecutionResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ActionExecutionResponse>(){}.getType();
    }
    
    if ("ActionMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<ActionMetadata>(){}.getType();
    }
    
    if ("ActionRef".equalsIgnoreCase(className)) {
      return new TypeToken<ActionRef>(){}.getType();
    }
    
    if ("ApplicationMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationMetadata>(){}.getType();
    }
    
    if ("ApplicationMetadataActions".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationMetadataActions>(){}.getType();
    }
    
    if ("ApplicationMetadataEntities".equalsIgnoreCase(className)) {
      return new TypeToken<ApplicationMetadataEntities>(){}.getType();
    }
    
    if ("BeanSorterObject".equalsIgnoreCase(className)) {
      return new TypeToken<BeanSorterObject>(){}.getType();
    }
    
    if ("DataPaginator".equalsIgnoreCase(className)) {
      return new TypeToken<DataPaginator>(){}.getType();
    }
    
    if ("EntityMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<EntityMetadata>(){}.getType();
    }
    
    if ("Field".equalsIgnoreCase(className)) {
      return new TypeToken<Field>(){}.getType();
    }
    
    if ("FieldGroup".equalsIgnoreCase(className)) {
      return new TypeToken<FieldGroup>(){}.getType();
    }
    
    if ("NavigationNode".equalsIgnoreCase(className)) {
      return new TypeToken<NavigationNode>(){}.getType();
    }
    
    if ("NavigationTree".equalsIgnoreCase(className)) {
      return new TypeToken<NavigationTree>(){}.getType();
    }
    
    if ("QueryParameters".equalsIgnoreCase(className)) {
      return new TypeToken<QueryParameters>(){}.getType();
    }
    
    if ("ViewDescriptor".equalsIgnoreCase(className)) {
      return new TypeToken<ViewDescriptor>(){}.getType();
    }
    
    if ("ViewDescriptorMetadata".equalsIgnoreCase(className)) {
      return new TypeToken<ViewDescriptorMetadata>(){}.getType();
    }
    
    if ("ViewLayout".equalsIgnoreCase(className)) {
      return new TypeToken<ViewLayout>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
