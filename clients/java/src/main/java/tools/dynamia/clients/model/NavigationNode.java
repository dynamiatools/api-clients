/*
 * DynamiaTools API
 * DynamiaTools Metadata API
 *
 * The version of the OpenAPI document: 5.3.6
 * Contact: mario@dynamiasoluciones.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tools.dynamia.clients.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * NavigationNode
 */
@JsonPropertyOrder({
  NavigationNode.JSON_PROPERTY_ID,
  NavigationNode.JSON_PROPERTY_NAME,
  NavigationNode.JSON_PROPERTY_LONG_NAME,
  NavigationNode.JSON_PROPERTY_TYPE,
  NavigationNode.JSON_PROPERTY_DESCRIPTION,
  NavigationNode.JSON_PROPERTY_ICON,
  NavigationNode.JSON_PROPERTY_INTERNAL_PATH,
  NavigationNode.JSON_PROPERTY_PATH,
  NavigationNode.JSON_PROPERTY_POSITION,
  NavigationNode.JSON_PROPERTY_FEATURED,
  NavigationNode.JSON_PROPERTY_ATTRIBUTES,
  NavigationNode.JSON_PROPERTY_FILE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class NavigationNode {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_LONG_NAME = "longName";
  @jakarta.annotation.Nullable
  private String longName;

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nullable
  private String type;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_ICON = "icon";
  @jakarta.annotation.Nullable
  private String icon;

  public static final String JSON_PROPERTY_INTERNAL_PATH = "internalPath";
  @jakarta.annotation.Nullable
  private String internalPath;

  public static final String JSON_PROPERTY_PATH = "path";
  @jakarta.annotation.Nullable
  private String path;

  public static final String JSON_PROPERTY_POSITION = "position";
  @jakarta.annotation.Nullable
  private Double position;

  public static final String JSON_PROPERTY_FEATURED = "featured";
  @jakarta.annotation.Nullable
  private Boolean featured;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  @jakarta.annotation.Nullable
  private Map<String, Object> attributes = new HashMap<>();

  public static final String JSON_PROPERTY_FILE = "file";
  @jakarta.annotation.Nullable
  private String _file;

  public NavigationNode() {
  }

  public NavigationNode id(@jakarta.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }

  public NavigationNode name(@jakarta.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }

  public NavigationNode longName(@jakarta.annotation.Nullable String longName) {
    
    this.longName = longName;
    return this;
  }

  /**
   * Get longName
   * @return longName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLongName() {
    return longName;
  }


  @JsonProperty(JSON_PROPERTY_LONG_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongName(@jakarta.annotation.Nullable String longName) {
    this.longName = longName;
  }

  public NavigationNode type(@jakarta.annotation.Nullable String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@jakarta.annotation.Nullable String type) {
    this.type = type;
  }

  public NavigationNode description(@jakarta.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }

  public NavigationNode icon(@jakarta.annotation.Nullable String icon) {
    
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIcon(@jakarta.annotation.Nullable String icon) {
    this.icon = icon;
  }

  public NavigationNode internalPath(@jakarta.annotation.Nullable String internalPath) {
    
    this.internalPath = internalPath;
    return this;
  }

  /**
   * Get internalPath
   * @return internalPath
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalPath() {
    return internalPath;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalPath(@jakarta.annotation.Nullable String internalPath) {
    this.internalPath = internalPath;
  }

  public NavigationNode path(@jakarta.annotation.Nullable String path) {
    
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(@jakarta.annotation.Nullable String path) {
    this.path = path;
  }

  public NavigationNode position(@jakarta.annotation.Nullable Double position) {
    
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getPosition() {
    return position;
  }


  @JsonProperty(JSON_PROPERTY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPosition(@jakarta.annotation.Nullable Double position) {
    this.position = position;
  }

  public NavigationNode featured(@jakarta.annotation.Nullable Boolean featured) {
    
    this.featured = featured;
    return this;
  }

  /**
   * Get featured
   * @return featured
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEATURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFeatured() {
    return featured;
  }


  @JsonProperty(JSON_PROPERTY_FEATURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeatured(@jakarta.annotation.Nullable Boolean featured) {
    this.featured = featured;
  }

  public NavigationNode attributes(@jakarta.annotation.Nullable Map<String, Object> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public NavigationNode putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(@jakarta.annotation.Nullable Map<String, Object> attributes) {
    this.attributes = attributes;
  }

  public NavigationNode _file(@jakarta.annotation.Nullable String _file) {
    
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFile() {
    return _file;
  }


  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFile(@jakarta.annotation.Nullable String _file) {
    this._file = _file;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NavigationNode navigationNode = (NavigationNode) o;
    return Objects.equals(this.id, navigationNode.id) &&
        Objects.equals(this.name, navigationNode.name) &&
        Objects.equals(this.longName, navigationNode.longName) &&
        Objects.equals(this.type, navigationNode.type) &&
        Objects.equals(this.description, navigationNode.description) &&
        Objects.equals(this.icon, navigationNode.icon) &&
        Objects.equals(this.internalPath, navigationNode.internalPath) &&
        Objects.equals(this.path, navigationNode.path) &&
        Objects.equals(this.position, navigationNode.position) &&
        Objects.equals(this.featured, navigationNode.featured) &&
        Objects.equals(this.attributes, navigationNode.attributes) &&
        Objects.equals(this._file, navigationNode._file);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, longName, type, description, icon, internalPath, path, position, featured, attributes, _file);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NavigationNode {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    longName: ").append(toIndentedString(longName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    internalPath: ").append(toIndentedString(internalPath)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

