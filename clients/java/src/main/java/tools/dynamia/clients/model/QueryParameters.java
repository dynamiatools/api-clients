/*
 * DynamiaTools API
 * DynamiaTools Metadata API
 *
 * The version of the OpenAPI document: 5.3.6
 * Contact: mario@dynamiasoluciones.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tools.dynamia.clients.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import tools.dynamia.clients.model.BeanSorterObject;
import tools.dynamia.clients.model.DataPaginator;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * QueryParameters
 */
@JsonPropertyOrder({
  QueryParameters.JSON_PROPERTY_SORTER,
  QueryParameters.JSON_PROPERTY_PAGINATOR,
  QueryParameters.JSON_PROPERTY_AUTOCREATE_SEARCHEABLE_STRINGS,
  QueryParameters.JSON_PROPERTY_HINTS,
  QueryParameters.JSON_PROPERTY_DEPTH,
  QueryParameters.JSON_PROPERTY_MAX_RESULTS,
  QueryParameters.JSON_PROPERTY_SORTED_KEYS,
  QueryParameters.JSON_PROPERTY_SORTED,
  QueryParameters.JSON_PROPERTY_EMPTY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-13T13:27:54.300070628-05:00[America/Bogota]", comments = "Generator version: 7.12.0")
public class QueryParameters extends HashMap<String, Object> {
  public static final String JSON_PROPERTY_SORTER = "sorter";
  @jakarta.annotation.Nullable
  private BeanSorterObject sorter;

  public static final String JSON_PROPERTY_PAGINATOR = "paginator";
  @jakarta.annotation.Nullable
  private DataPaginator paginator;

  public static final String JSON_PROPERTY_AUTOCREATE_SEARCHEABLE_STRINGS = "autocreateSearcheableStrings";
  @jakarta.annotation.Nullable
  private Boolean autocreateSearcheableStrings;

  public static final String JSON_PROPERTY_HINTS = "hints";
  @jakarta.annotation.Nullable
  private Map<String, Object> hints = new HashMap<>();

  public static final String JSON_PROPERTY_DEPTH = "depth";
  @jakarta.annotation.Nullable
  private Integer depth;

  public static final String JSON_PROPERTY_MAX_RESULTS = "maxResults";
  @jakarta.annotation.Nullable
  private Integer maxResults;

  public static final String JSON_PROPERTY_SORTED_KEYS = "sortedKeys";
  @jakarta.annotation.Nullable
  private List<String> sortedKeys = new ArrayList<>();

  public static final String JSON_PROPERTY_SORTED = "sorted";
  @jakarta.annotation.Nullable
  private Boolean sorted;

  public static final String JSON_PROPERTY_EMPTY = "empty";
  @jakarta.annotation.Nullable
  private Boolean empty;

  public QueryParameters() {

  }

  public QueryParameters sorter(@jakarta.annotation.Nullable BeanSorterObject sorter) {
    
    this.sorter = sorter;
    return this;
  }

  /**
   * Get sorter
   * @return sorter
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BeanSorterObject getSorter() {
    return sorter;
  }


  @JsonProperty(JSON_PROPERTY_SORTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSorter(@jakarta.annotation.Nullable BeanSorterObject sorter) {
    this.sorter = sorter;
  }

  public QueryParameters paginator(@jakarta.annotation.Nullable DataPaginator paginator) {
    
    this.paginator = paginator;
    return this;
  }

  /**
   * Get paginator
   * @return paginator
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGINATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DataPaginator getPaginator() {
    return paginator;
  }


  @JsonProperty(JSON_PROPERTY_PAGINATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaginator(@jakarta.annotation.Nullable DataPaginator paginator) {
    this.paginator = paginator;
  }

  public QueryParameters autocreateSearcheableStrings(@jakarta.annotation.Nullable Boolean autocreateSearcheableStrings) {
    
    this.autocreateSearcheableStrings = autocreateSearcheableStrings;
    return this;
  }

  /**
   * Get autocreateSearcheableStrings
   * @return autocreateSearcheableStrings
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTOCREATE_SEARCHEABLE_STRINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutocreateSearcheableStrings() {
    return autocreateSearcheableStrings;
  }


  @JsonProperty(JSON_PROPERTY_AUTOCREATE_SEARCHEABLE_STRINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutocreateSearcheableStrings(@jakarta.annotation.Nullable Boolean autocreateSearcheableStrings) {
    this.autocreateSearcheableStrings = autocreateSearcheableStrings;
  }

  public QueryParameters hints(@jakarta.annotation.Nullable Map<String, Object> hints) {
    
    this.hints = hints;
    return this;
  }

  public QueryParameters putHintsItem(String key, Object hintsItem) {
    if (this.hints == null) {
      this.hints = new HashMap<>();
    }
    this.hints.put(key, hintsItem);
    return this;
  }

  /**
   * Get hints
   * @return hints
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getHints() {
    return hints;
  }


  @JsonProperty(JSON_PROPERTY_HINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHints(@jakarta.annotation.Nullable Map<String, Object> hints) {
    this.hints = hints;
  }

  public QueryParameters depth(@jakarta.annotation.Nullable Integer depth) {
    
    this.depth = depth;
    return this;
  }

  /**
   * Get depth
   * @return depth
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDepth() {
    return depth;
  }


  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepth(@jakarta.annotation.Nullable Integer depth) {
    this.depth = depth;
  }

  public QueryParameters maxResults(@jakarta.annotation.Nullable Integer maxResults) {
    
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxResults() {
    return maxResults;
  }


  @JsonProperty(JSON_PROPERTY_MAX_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxResults(@jakarta.annotation.Nullable Integer maxResults) {
    this.maxResults = maxResults;
  }

  public QueryParameters sortedKeys(@jakarta.annotation.Nullable List<String> sortedKeys) {
    
    this.sortedKeys = sortedKeys;
    return this;
  }

  public QueryParameters addSortedKeysItem(String sortedKeysItem) {
    if (this.sortedKeys == null) {
      this.sortedKeys = new ArrayList<>();
    }
    this.sortedKeys.add(sortedKeysItem);
    return this;
  }

  /**
   * Get sortedKeys
   * @return sortedKeys
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORTED_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSortedKeys() {
    return sortedKeys;
  }


  @JsonProperty(JSON_PROPERTY_SORTED_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortedKeys(@jakarta.annotation.Nullable List<String> sortedKeys) {
    this.sortedKeys = sortedKeys;
  }

  public QueryParameters sorted(@jakarta.annotation.Nullable Boolean sorted) {
    
    this.sorted = sorted;
    return this;
  }

  /**
   * Get sorted
   * @return sorted
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSorted() {
    return sorted;
  }


  @JsonProperty(JSON_PROPERTY_SORTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSorted(@jakarta.annotation.Nullable Boolean sorted) {
    this.sorted = sorted;
  }

  public QueryParameters empty(@jakarta.annotation.Nullable Boolean empty) {
    
    this.empty = empty;
    return this;
  }

  /**
   * Get empty
   * @return empty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmpty() {
    return empty;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmpty(@jakarta.annotation.Nullable Boolean empty) {
    this.empty = empty;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryParameters queryParameters = (QueryParameters) o;
    return Objects.equals(this.sorter, queryParameters.sorter) &&
        Objects.equals(this.paginator, queryParameters.paginator) &&
        Objects.equals(this.autocreateSearcheableStrings, queryParameters.autocreateSearcheableStrings) &&
        Objects.equals(this.hints, queryParameters.hints) &&
        Objects.equals(this.depth, queryParameters.depth) &&
        Objects.equals(this.maxResults, queryParameters.maxResults) &&
        Objects.equals(this.sortedKeys, queryParameters.sortedKeys) &&
        Objects.equals(this.sorted, queryParameters.sorted) &&
        Objects.equals(this.empty, queryParameters.empty) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sorter, paginator, autocreateSearcheableStrings, hints, depth, maxResults, sortedKeys, sorted, empty, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryParameters {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sorter: ").append(toIndentedString(sorter)).append("\n");
    sb.append("    paginator: ").append(toIndentedString(paginator)).append("\n");
    sb.append("    autocreateSearcheableStrings: ").append(toIndentedString(autocreateSearcheableStrings)).append("\n");
    sb.append("    hints: ").append(toIndentedString(hints)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    sortedKeys: ").append(toIndentedString(sortedKeys)).append("\n");
    sb.append("    sorted: ").append(toIndentedString(sorted)).append("\n");
    sb.append("    empty: ").append(toIndentedString(empty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

